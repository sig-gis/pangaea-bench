import collections.abc
import math
import torch.nn as nn
import torch

from functools import partial
from itertools import repeat
from typing import Optional, Tuple, Union, List

from pangaea.encoders.pos_embed import get_2d_sincos_pos_embed_with_scale
from pangaea.encoders.anysat_utils.irpe import build_rpe, get_rpe_config


def drop_path(x, drop_prob: float = 0., training: bool = False, scale_by_keep: bool = True):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.

    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = x.new_empty(shape).bernoulli_(keep_prob)
    if keep_prob > 0.0 and scale_by_keep:
        random_tensor.div_(keep_prob)
    return x * random_tensor


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob: float = 0., scale_by_keep: bool = True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)

    def extra_repr(self):
        return f'drop_prob={round(self.drop_prob,3):0.3f}'
    
def get_mask(mask, modality):
    if modality in ['alos', 'l7']:
        return torch.max(mask.flatten(1, 2), dim=1).values.flatten(1, 2)
    else:
        scale = 3
        mask = mask.flatten(1, 2).unfold(
            2, scale, scale).unfold(3, scale, scale)
        mask = mask.flatten(2, 3).flatten(3, 4)
        mask = mask.permute(0, 2, 1, 3).flatten(2, 3)
    return torch.max(mask, dim=2).values


def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)


class PatchMLPMulti(nn.Module):
    def __init__(
            self,
            in_chans: int = 3,
            resolution: float = 0.2,
            embed_dim: int = 768,
            patch_size: int = 10,
            bias: bool = True,
            mlp: List[int] = [],
            ):
        super().__init__()
        self.patch_size = patch_size
        self.res = int(10 / resolution)
        self.patch_embed = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size, bias=bias)
        layers = []
        for i in range(len(mlp) - 1):
            layers.extend(
                [
                    nn.Linear(mlp[i], mlp[i + 1]),
                    nn.LayerNorm(mlp[i + 1]),
                    nn.ReLU(),
                ]
            )
        self.mlp  = nn.Sequential(*layers)

    def forward(self, x, scale):
        x = self.patch_embed(x)
        grid_size = (self.res // self.patch_size, self.res // self.patch_size)
        x = x.unfold(2, grid_size[0], grid_size[0]).unfold(3, grid_size[1], grid_size[1])
        x = x.flatten(4, 5)
        x = x.unfold(2, scale, scale).unfold(3, scale, scale)
        x = x.flatten(2, 3).permute(0, 1, 2, 4, 5, 3).flatten(3, 5)
        x = torch.permute(x,(0,2,3,1))
        x = x.flatten(0,1)
        x = self.mlp(x)
        return x


class RPEAttention(nn.Module):
    '''
    Attention with image relative position encoding
    '''

    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0., n_modalities=1):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)
        self.n_modalities = n_modalities

        # image relative position encoding
        rpe_config = get_rpe_config(
                ratio=1.9,
                method="euc",
                mode='ctx',
                shared_head=True,
                skip=1,
                rpe_on='k',
            )
        self.rpe_q, self.rpe_k, self.rpe_v = build_rpe(rpe_config,
                      head_dim=head_dim,
                      num_heads=num_heads,
                      n_modalities=n_modalities)

    def forward(self, x, mask=None):
        B, N, C = x.shape
        if mask is None:
            height = int((N // self.n_modalities) ** .5)
        else:
            height = mask.shape[-1]

        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)

        q *= self.scale

        attn = (q @ k.transpose(-2, -1))
        # image relative position on keys
        if self.rpe_k is not None:
            attn += self.rpe_k(q, pos=mask, height=height, width=height)

        # # image relative position on queries
        if self.rpe_q is not None:
            attn += self.rpe_q(k * self.scale).transpose(2, 3)

        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        out = attn @ v

        # image relative position on values
        if self.rpe_v is not None:
            out += self.rpe_v(attn)

        x = out.transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class BlockTransformer(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, n_modalities=1):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = RPEAttention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, 
            proj_drop=drop, n_modalities=n_modalities)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, mask=None):
        x = x + self.drop_path(self.attn(self.norm1(x), mask=mask))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class PatchDropout(nn.Module):
    """
    https://arxiv.org/abs/2212.00794 and https://arxiv.org/pdf/2208.07220
    """
    return_indices: torch.jit.Final[bool]

    def __init__(
            self,
            prob: float = 0.5,
            num_prefix_tokens: int = 1,
            ordered: bool = False,
            return_indices: bool = False,
    ):
        super().__init__()
        assert 0 <= prob < 1.
        self.prob = prob
        # exclude CLS token (or other prefix tokens)
        self.num_prefix_tokens = num_prefix_tokens
        self.ordered = ordered
        self.return_indices = return_indices

    def forward(self, x) -> Union[torch.Tensor, Tuple[torch.Tensor, Optional[torch.Tensor]]]:
        if not self.training or self.prob == 0.:
            if self.return_indices:
                return x, None
            return x

        if self.num_prefix_tokens:
            prefix_tokens, x = x[:, :self.num_prefix_tokens], x[:,
                                                                self.num_prefix_tokens:]
        else:
            prefix_tokens = None

        B = x.shape[0]
        L = x.shape[1]
        num_keep = max(1, int(L * (1. - self.prob)))
        keep_indices = torch.argsort(torch.randn(
            B, L, device=x.device), dim=-1)[:, :num_keep]
        if self.ordered:
            # NOTE does not need to maintain patch order in typical transformer use,
            # but possibly useful for debug / visualization
            keep_indices = keep_indices.sort(dim=-1)[0]
        x = x.gather(
            1, keep_indices.unsqueeze(-1).expand((-1, -1) + x.shape[2:]))

        if prefix_tokens is not None:
            x = torch.cat((prefix_tokens, x), dim=1)

        if self.return_indices:
            return x, keep_indices
        return x


class Mlp(nn.Module):
    """ MLP as used in Vision Transformer, MLP-Mixer and related networks
    """
    def __init__(
            self,
            in_features,
            hidden_features=None,
            out_features=None,
            act_layer=nn.GELU,
            norm_layer=None,
            bias=True,
            drop=0.,
            use_conv=False,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        to_2tuple = _ntuple(2)
        bias = to_2tuple(bias)
        drop_probs = to_2tuple(drop)
        linear_layer = partial(nn.Conv2d, kernel_size=1) if use_conv else nn.Linear

        self.fc1 = linear_layer(in_features, hidden_features, bias=bias[0])
        self.act = act_layer()
        self.drop1 = nn.Dropout(drop_probs[0])
        self.norm = norm_layer(hidden_features) if norm_layer is not None else nn.Identity()
        self.fc2 = linear_layer(hidden_features, out_features, bias=bias[1])
        self.drop2 = nn.Dropout(drop_probs[1])

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop1(x)
        x = self.norm(x)
        x = self.fc2(x)
        x = self.drop2(x)
        return x


def _ntuple(n):
    def parse(x):
        if isinstance(x, collections.abc.Iterable) and not isinstance(x, str):
            return tuple(x)
        return tuple(repeat(x, n))
    return parse


class Attention(nn.Module):
    # fused_attn: Final[bool]

    def __init__(
            self,
            dim,
            num_heads=8,
            qkv_bias=False,
            qk_norm=False,
            attn_drop=0.,
            proj_drop=0.,
            norm_layer=nn.LayerNorm,
            use_flash_attn=False
    ):
        super().__init__()
        assert dim % num_heads == 0, 'dim should be divisible by num_heads'
        self.num_heads = num_heads
        self.head_dim = dim // num_heads
        self.scale = self.head_dim ** -0.5
        
        # omitting flash_attn for now, as it is not compatible with the current implementation
        if use_flash_attn:
            self.flash_attn_func = None
            # try:
            #     from flash_attn import flash_attn_func
            #     self.flash_attn_func = flash_attn_func
            # except ImportError:
            #     raise ImportError("flash-attn is not installed. Please install it with `pip install flash-attn`")
        else:
            self.flash_attn_func = None

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.q_norm = norm_layer(self.head_dim) if qk_norm else nn.Identity()
        self.k_norm = norm_layer(self.head_dim) if qk_norm else nn.Identity()
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
        q, k, v = qkv.unbind(0)
        q, k = self.q_norm(q), self.k_norm(k)

        if self.flash_attn_func is not None:
            x = self.flash_attn_func(q, k, v, causal=False)
        else:
            attn = (q @ k.transpose(-2, -1)) * self.scale
            attn = attn.softmax(dim=-1)
            attn = self.attn_drop(attn)
            x = (attn @ v)

        x = x.transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class LayerScale(nn.Module):
    def __init__(self, dim, init_values=1e-5, inplace=False):
        super().__init__()
        self.inplace = inplace
        self.gamma = nn.Parameter(init_values * torch.ones(dim))

    def forward(self, x):
        return x.mul_(self.gamma) if self.inplace else x * self.gamma


class Block(nn.Module):

    def __init__(
            self,
            dim,
            num_heads,
            mlp_ratio=4.,
            qkv_bias=False,
            qk_norm=False,
            proj_drop=0.,
            attn_drop=0.,
            init_values=None,
            drop_path=0.,
            act_layer=nn.GELU,
            norm_layer=nn.LayerNorm,
            flash_attn=True,
    ):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim,
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_norm=qk_norm,
            attn_drop=attn_drop,
            proj_drop=proj_drop,
            norm_layer=norm_layer,
            use_flash_attn=flash_attn,
        )
        self.ls1 = LayerScale(dim, init_values=init_values) if init_values else nn.Identity()
        self.drop_path1 = DropPath(drop_path) if drop_path > 0. else nn.Identity()

        self.norm2 = norm_layer(dim)
        self.mlp = Mlp(
            in_features=dim,
            hidden_features=int(dim * mlp_ratio),
            act_layer=act_layer,
            drop=proj_drop,
        )
        self.ls2 = LayerScale(dim, init_values=init_values) if init_values else nn.Identity()
        self.drop_path2 = DropPath(drop_path) if drop_path > 0. else nn.Identity()

    def forward(self, x):
        x = x + self.drop_path1(self.ls1(self.attn(self.norm1(x))))
        x = x + self.drop_path2(self.ls2(self.mlp(self.norm2(x))))
        return x


class CrossRPEAttentionMulti(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0., num_patches={}, modalities={}, scales={}, release=False,):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.num_patches = num_patches
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.wk = nn.Linear(dim, dim, bias=qkv_bias)
        self.wv = nn.Linear(dim, dim, bias=qkv_bias)

        self.q_learned = nn.Parameter(torch.zeros(1, 1, dim))
        if not release: 
            self.datasets = list(modalities.keys())
            self.modis = {dataset: int("modis" in modalities[dataset]) for dataset in self.datasets}
            self.len_modalities = {}
            self.pos_embed = {}
            for dataset in self.datasets:
                self.len_modalities[dataset] = len(modalities[dataset]) - int("modis" in modalities[dataset])
                for scale in scales[dataset]:
                    num_p = num_patches[dataset] // (scale * scale)
                    self.pos_embed['_'.join([dataset, str(scale)])] = get_2d_sincos_pos_embed_with_scale(dim, int(num_p ** .5), 
                                                                                                scale, cls_token=True, modis=self.modis[dataset])

        # image relative position encoding
        rpe_config = get_rpe_config(
                ratio=1.9,
                method="euc",
                mode='ctx',
                shared_head=True,
                skip=1,
                rpe_on='k',
            )
        
        self.rpe_q, self.rpe_k, self.rpe_v = build_rpe(rpe_config,
                      head_dim=head_dim,
                      num_heads=num_heads,
                      n_modalities=1)
        
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, mask=None, dataset="", scale=1):
        B, N, C = x.shape
        pos_embed = self.pos_embed['_'.join([dataset, str(scale)])].to(x.device)
        modis = self.modis[dataset]
        # B1C -> B1H(C/H) -> BH1(C/H)
        if mask is None:
            num_patches = N // self.len_modalities[dataset] + int(N%self.len_modalities[dataset] > 0) + modis
            q_ = self.q_learned.expand(B, num_patches, -1) + pos_embed.expand(B, -1, -1)
        else:
            num_patches = mask.shape[-1] + 1 + modis
            mask_pos = mask.unsqueeze(-1).repeat(1, 1, pos_embed.shape[-1])
            pos_embed_e = pos_embed.expand(B, -1, -1)
            masked_pos_embed = torch.gather(pos_embed.expand(B, -1, -1)[:, 1:], dim=1, index=mask_pos)
            pos_embed = torch.cat([pos_embed_e[:, :(1 + modis)], masked_pos_embed], dim = 1)
            q_ = self.q_learned.expand(B, num_patches, -1) + pos_embed
        q = q_.reshape(B, num_patches, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        # BNC -> BNH(C/H) -> BHN(C/H)
        k = self.wk(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        # BNC -> BNH(C/H) -> BHN(C/H)
        v = self.wv(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

        attn = (q @ k.transpose(-2, -1)) * self.scale  # BH1(C/H) @ BH(C/H)N -> BH1N

        # image relative position on keys
        if self.rpe_k is not None:
            height = int((self.num_patches[dataset] ** 0.5) / scale)
            rpe = self.rpe_k(q, height=height, width=height, pos=mask, modis=modis)
            attn += torch.cat([rpe[:, :, :, :(1+ modis)], rpe[:, :, :, (1+ modis):].repeat(1, 1, 1, self.len_modalities[dataset])], dim=-1)
            
        # image relative position on queries
        if self.rpe_q is not None:
            attn += self.rpe_q(k * self.scale).transpose(2, 3)

        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, num_patches, C)  # (BH1N @ BHN(C/H)) -> BH1(C/H) -> B1H(C/H) -> B1C
        x = torch.cat([x[:, :1], x[:, (1 + modis):]], dim=1)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x
    
    def forward_release(self, x, mask=None, n_modalities=1, modis=False, scale=1):
        B, N, C = x.shape
        num_patches = N // n_modalities + int((N - int(modis)) % n_modalities > 0) + int(modis)
        pos_embed = get_2d_sincos_pos_embed_with_scale(C, int(num_patches ** .5), scale, cls_token=True, modis=modis).to(x.device)
        # B1C -> B1H(C/H) -> BH1(C/H)
        if mask is None:
            q_ = self.q_learned.expand(B, num_patches, -1) + pos_embed.expand(B, -1, -1)
        else:
            num_patches = mask.shape[-1] + 1 + modis
            mask_pos = mask.unsqueeze(-1).repeat(1, 1, pos_embed.shape[-1])
            pos_embed_e = pos_embed.expand(B, -1, -1)
            masked_pos_embed = torch.gather(pos_embed.expand(B, -1, -1)[:, 1:], dim=1, index=mask_pos)
            pos_embed = torch.cat([pos_embed_e[:, :(1 + modis)], masked_pos_embed], dim = 1)
            q_ = self.q_learned.expand(B, num_patches, -1) + pos_embed
        q = q_.reshape(B, num_patches, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        # BNC -> BNH(C/H) -> BHN(C/H)
        k = self.wk(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        # BNC -> BNH(C/H) -> BHN(C/H)
        v = self.wv(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

        attn = (q @ k.transpose(-2, -1)) * self.scale  # BH1(C/H) @ BH(C/H)N -> BH1N

        # image relative position on keys
        if self.rpe_k is not None:
            height = int((num_patches ** 0.5))
            rpe = self.rpe_k(q, height=height, width=height, pos=mask, modis=modis)
            attn += torch.cat([rpe[:, :, :, :(1+ modis)], rpe[:, :, :, (1+ modis):].repeat(1, 1, 1, n_modalities)], dim=-1)
            
        # image relative position on queries
        if self.rpe_q is not None:
            attn += self.rpe_q(k * self.scale).transpose(2, 3)

        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, num_patches, C)  # (BH1N @ BHN(C/H)) -> BH1(C/H) -> B1H(C/H) -> B1C
        x = torch.cat([x[:, :1], x[:, (1 + modis):]], dim=1)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x



class CrossBlockMulti(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0., release=False,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, num_patches={}, modalities={}, scales={}):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = CrossRPEAttentionMulti(dim, num_heads=num_heads, qkv_bias=qkv_bias, modalities=modalities, release=release,
                        qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop, num_patches=num_patches, scales=scales)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, mask=None, dataset="", scale=1):
        x = self.drop_path(self.attn(self.norm1(x), mask=mask, dataset=dataset, scale=scale))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x
    
    def forward_release(self, x, n_modalities=1, modis=False, scale=1):
        x = self.drop_path(self.attn.forward_release(self.norm1(x), n_modalities=n_modalities, modis=modis, scale=scale))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x
